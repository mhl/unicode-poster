#!/usr/bin/ruby -w

unless FileTest.exists? 'Blocks.txt'
  unless system( "curl", "-s", "ftp://ftp.unicode.org/Public/5.1.0/ucd/Blocks.txt", "-o", "Blocks.txt" )
    STDERR.puts "Couldn't download Blocks.txt."
    exit(-1)
  end
end

require 'fileutils'
require 'tileinfo'

s_min_array = Array.new
s_max_array = Array.new

files = Dir['U*-*-*.png']

open( "non-blank/sizes.yaml", "w" ) do |o|

  o.puts "---"

  files.each do |f|
    
    block_name = name_of_page(f.gsub(/^(U[0-9A-F]+).*$/,'\1'))
    
    if block_name
      
      output =safe_backticks("../png-find-grid-revised/empty-image",f)
      if $?.success?
        # Do nothing, the image was empty...
        puts "#{f} was empty"
      else
        output.chomp!
        if output =~ /^(\d+) (\d+)/
          o.puts("#{f}: !ruby/object:TileInfo")
          o.puts("  filename: #{f}")
          o.puts("  h: #{$2}")
          o.puts("  w: #{$1}")
          o.puts("  block: #{block_name}")
          w = Integer($1)
          h = Integer($2)
          if w > h
            s_min_array.push sprintf("%04d minimum dimension of %s", h, f.gsub(/\-\d{8}\./,'.'))
            s_max_array.push sprintf("%04d maximum dimension of %s", w, f.gsub(/\-\d{8}\./,'.'))
          else
            s_min_array.push sprintf("%04d minimum dimension of %s", w, f.gsub(/\-\d{8}\./,'.'))
            s_max_array.push sprintf("%04d maximum dimension of %s", h, f.gsub(/\-\d{8}\./,'.'))
          end
          # o.flush
          unless system("ln","-s","../#{f}","non-blank/#{f}")
            puts "ln -s ../#{f} non-blank/#{f} failed"
            exit(-1)
          end
        end
      end
    end
    
  end
  
end

STDERR.puts "Now sorting the array..."

s_min_array.sort!
s_min_array.uniq!
open("non-blank/minimum-sizes","w") do |f|
  s_min_array.each { |l| f.puts l }
end

s_max_array.sort!
s_min_array.uniq!
open("non-blank/maximum-sizes","w") do |f|
  s_max_array.each { |l| f.puts l }
end
